//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

/// @@allow('read', auth() != null)
/// @@allow('create,update,delete', auth() != null)
model UserRole {
  id        String   @id() @default(cuid())
  name      String   @unique()
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  users     User[]
}

/// @@allow('read', auth() == this)
/// @@allow('create', true)
model User {
  id                        String                     @id() @default(cuid())
  email                     String                     @unique()
  name                      String?
  password                  String
  createdAt                 DateTime                   @default(now())
  updatedAt                 DateTime                   @updatedAt()
  role                      UserRole                   @relation(fields: [roleId], references: [id])
  roleId                    String
  scrapingJobs              ScrapingJob[]
  marketplaceConfigurations MarketplaceConfiguration[]
  notifications             Notification[]
  scrapingSchedule          ScrapingSchedule[]
}

/// @@allow('read', auth() != null)
/// @@allow('create,update,delete', auth() == user)
model MarketplaceConfiguration {
  id               String             @id() @default(cuid())
  name             String
  url              String
  selectors        String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt()
  user             User               @relation(fields: [userId], references: [id])
  userId           String
  scrapingJobs     ScrapingJob[]
  scrapingSchedule ScrapingSchedule[]
}

/// @@allow('read', auth() == user)
/// @@allow('create', auth() != null)
/// @@allow('update,delete', auth() == user)
model ScrapingJob {
  id                       String                   @id() @default(cuid())
  status                   String                   @default("PENDING")
  category                 String?
  productList              String?
  results                  String?
  createdAt                DateTime                 @default(now())
  updatedAt                DateTime                 @updatedAt()
  user                     User                     @relation(fields: [userId], references: [id])
  userId                   String
  marketplaceConfiguration MarketplaceConfiguration @relation(fields: [marketplaceConfigId], references: [id])
  marketplaceConfigId      String
  errorMessage             String?
  lastRunAt                DateTime?
  scrapedProduct           ScrapedProduct[]
  jobLog                   JobLog[]
}

/// @@allow('read', scrapingJob.user == auth())
/// @@allow('create', true)
model JobLog {
  id            String      @id() @default(cuid())
  scrapingJobId String
  scrapingJob   ScrapingJob @relation(fields: [scrapingJobId], references: [id])
  status        String?
  message       String?
  createdAt     DateTime    @default(now())
}

/// @@allow('read', scrapingJob.user == auth())
/// @@allow('create,update,delete', auth() != null)
model ScrapedProduct {
  id            String      @id() @default(cuid())
  scrapingJobId String
  scrapingJob   ScrapingJob @relation(fields: [scrapingJobId], references: [id])
  name          String
  price         Float?
  currency      String?
  code          String?
  description   String?
  imageUrl      String?
  productUrl    String?
  availability  String?
  rating        Float?
  reviewCount   Int?
  brand         String?
  attributes    String?
  link          String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt()
}

/// @@allow('read,create,update,delete', auth() == user)
model ScrapingSchedule {
  id              String                   @id() @default(cuid())
  userId          String
  user            User                     @relation(fields: [userId], references: [id])
  configurationId String
  configuration   MarketplaceConfiguration @relation(fields: [configurationId], references: [id])
  frequency       ScheduleConfig           @relation(fields: [frequencyId], references: [id])
  frequencyId     String
  lastRunAt       DateTime?
  nextRunAt       DateTime?
  isActive        Boolean                  @default(true)
  createdAt       DateTime                 @default(now())
  updatedAt       DateTime                 @updatedAt()
}

/// @@allow('read', auth() != null)
/// @@allow('create,update,delete', auth() != null)
model ScheduleConfig {
  id               String             @id() @default(cuid())
  frequency        Int?
  dayOfWeek        Int?
  dayOfMonth       Int?
  hourOfDay        Int?
  minuteOfHour     Int?
  scrapingSchedule ScrapingSchedule[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt()
}

/// @@allow('read', auth() != null)
/// @@allow('create,update,delete', auth() != null)
model NotificationType {
  id            String         @id() @default(cuid())
  name          String         @unique()
  description   String?
  notifications Notification[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt()
}

/// @@allow('read,update', auth() == user)
/// @@allow('create', true)
model Notification {
  id                 String           @id() @default(cuid())
  userId             String
  user               User             @relation(fields: [userId], references: [id])
  message            String?
  type               NotificationType @relation(fields: [notificationTypeId], references: [id])
  notificationTypeId String
  isRead             Boolean          @default(false)
  createdAt          DateTime         @default(now())
}

/// @@allow('create', true)
/// @@allow('read', true)
/// @@allow('update', auth() != null)
/// @@allow('delete', auth() != null)
model RequestLog {
  id              String   @id() @default(cuid())
  activityType    String
  activityStatus  String   @default("INITIATED")
  activityMessage String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt()
}
