datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}
generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}


// plugin openapi {
//     provider = "@zenstackhq/openapi"
//     output   = "./src/zen/openapi.json"
//     title    = "TokiScrape"
//     version  = "1.0.0"
//     summary  = "API for managing scraping jobs and products"
//     description = "This API provides endpoints for managing scraping jobs and their associated scraped products."
// }
plugin hooks {
  provider = '@zenstackhq/tanstack-query'
  target = 'react'
  version = 'v5'
  output = 'src/lib/hooks'
  suspense = false
}
// plugin crud {
//     provider = "@zenstackhq/swr"
//     output   = "src/lib/api"
//}

plugin enhancer {
  provider    = '@core/enhancer'
  generatePermissionChecker = true
}

plugin zod {
  provider = '@core/zod'
    output = './src/lib/zod'
    compile = 'true'
}
model UserRole {
  id    String @id @default(cuid())
  name  String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users User[]
  // Allow read access to authenticated users, create/update/delete to admin only
  @@allow('read', auth() != null)
  @@allow('create,update,delete', auth() != null)


}
model User {
  id                       String                     @id @default(cuid())
  email                    String                     @unique
  name                     String?
  password                 String                      
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @updatedAt
  role                     UserRole                   @relation(fields: [roleId], references: [id])
  roleId                   String
  scrapingJobs             ScrapingJob[]
  marketplaceConfigurations MarketplaceConfiguration[]
  notifications Notification[]
  scrapingSchedule ScrapingSchedule[]
  // Allow read access to self, create by anyone
  @@allow('read', auth() == this)
  @@allow('create', true)
}

model MarketplaceConfiguration {
  id             String       @id @default(cuid())
  name           String
  url            String
  selectors      String       // Store CSS selectors for scraping
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  user           User         @relation(fields: [userId], references: [id])
  userId         String
  scrapingJobs   ScrapingJob[]

  // Allow read access to authenticated users, create/update/delete to owner and admin
  @@allow('read', auth() != null)
  @@allow('create,update,delete', auth() == user)

	scrapingSchedule ScrapingSchedule[]
}

model ScrapingJob {
  id                    String                   @id @default(cuid())
  status                String                   @default("PENDING")
  category              String?
  productList           String?
  results               String?
  createdAt             DateTime                 @default(now())
  updatedAt             DateTime                 @updatedAt
  user                  User                     @relation(fields: [userId], references: [id])
  userId                String
  marketplaceConfiguration MarketplaceConfiguration @relation(fields: [marketplaceConfigId], references: [id])
  marketplaceConfigId   String
  errorMessage          String?
  lastRunAt             DateTime?

  // Allow read access to owner and admin, create to authenticated users, update/delete to owner and admin
  @@allow('read', auth() == user)
  @@allow('create', auth() != null)
  @@allow('update,delete', auth() == user)
	scrapedProduct ScrapedProduct[]

	jobLog JobLog[]
}

model JobLog {
  id             String     @id @default(cuid())
  scrapingJobId  String
  scrapingJob    ScrapingJob @relation(fields: [scrapingJobId], references: [id])
  status         String?
  message        String?
  createdAt      DateTime   @default(now())

  // Allow read access to owner of the related scraping job and admin, create to system
  @@allow('read', scrapingJob.user == auth())
  @@allow('create', true)
}

model ScrapedProduct {
  id             String     @id @default(cuid())
  scrapingJobId  String
  scrapingJob    ScrapingJob @relation(fields: [scrapingJobId], references: [id])
  name           String
  price          Float?
  currency       String?
  code           String?
  description    String?
  imageUrl       String?
  productUrl     String?
  availability   String?
  rating         Float?
  reviewCount    Int?
  brand          String?
  attributes     String?      // Additional product attributes
  link           String?      // Changed from 'url?' to 'String?'
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  // Allow read access to owner of the related scraping job and admin, create/update/delete to admin
  @@allow('read', scrapingJob.user == auth())
  @@allow('create,update,delete', auth() != null)
}

model ScrapingSchedule {
  id             String     @id @default(cuid())
  userId         String
  user           User       @relation(fields: [userId], references: [id])
  configurationId String
  configuration  MarketplaceConfiguration @relation(fields: [configurationId], references: [id])
  frequency      ScheduleConfig @relation(fields: [frequencyId], references: [id])
  frequencyId    String
  lastRunAt      DateTime?
  nextRunAt      DateTime?
  isActive       Boolean    @default(true)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  // Allow read/create/update/delete to owner and admin
  @@allow('read,create,update,delete', auth() == user)
}


model ScheduleConfig {
  id             String     @id @default(cuid())
  frequency      Int?
  dayOfWeek      Int?       // 0-6, where 0 is Sunday (for WEEKLY)
  dayOfMonth     Int?       // 1-31 (for MONTHLY)
  hourOfDay      Int?       // 0-23 (for DAILY, WEEKLY, MONTHLY)
  minuteOfHour   Int?       // 0-59 (for HOURLY, DAILY, WEEKLY, MONTHLY)
  scrapingSchedule ScrapingSchedule[]
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  // Allow read access to all authenticated users, create/update/delete to admin
  @@allow('read', auth() != null)
  @@allow('create,update,delete', auth() != null)
}
model NotificationType {
  id             String     @id @default(cuid())
  name           String     @unique
  description    String?
  notifications  Notification[]
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  // Allow read access to all authenticated users, create/update/delete to admin
  @@allow('read', auth() != null)
  @@allow('create,update,delete', auth() != null)
}

model Notification {
  id             String     @id @default(cuid())
  userId         String
  user           User       @relation(fields: [userId], references: [id])
  message        String?
  type           NotificationType @relation(fields: [notificationTypeId], references: [id])
  notificationTypeId String
  isRead         Boolean    @default(false)
  createdAt      DateTime   @default(now())

  // Allow read/update to owner, create to system (no auth check for create)
  @@allow('read,update', auth() == user)
  @@allow('create', true)
}
model RequestLog {
  id            String   @id @default(cuid())
  activityType  String
  activityStatus String @default("INITIATED")
  activityMessage String?
  createdAt     DateTime @default(now()) 
  updatedAt     DateTime @updatedAt
  @@allow('create', true)
  @@allow('read', true)
  @@allow('update', auth() != null)
  @@allow('delete', auth() != null)
}